#!/bin/sh
#
# git-shift - shifts dates of specified commits by a specified amount of time
#
# How to set up:
#     $ install -m 755 git-shift ~/bin/
#     $ git config --global alias.shift '!$HOME/bin/git-shift'
#
# How to use:
#     $ git shift <offset> <commit_id> [<commit_id> ...]
#
#     Time offset format can be described in this extended regexp:
#         /^[-+]?(([0-9]+[wdhm])+|[0-9]+)$/
#     Some example values:
#         +1d -12h 30m -1h30m 60 (omission of unit implies seconds)
#
#     Each commit ID is a 40-byte hexadecimal commit object name, or a
#     partial prefix matching a single commit.
#
#
# Copyright (c) 2010, 2012 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

git_shift () {
    local offset="${1:-0}"; shift

    if [ $# -eq 0 ]; then
        echo "$0: no revision specified" >&2
        return 64
    fi

    local seconds="${offset#+}"
    case "$seconds" in
        *[wdhms]*) 
            seconds="$(printf '%s\n' "$seconds" | \
                sed -e 's:\(\([0-9]\{1,\}[wdhms]\)\{1,\}\):(\1):g' -e 's:\([wdhms]\)\([0-9]\):\1+\2:g' \
                    -e 's:w:*7d:g' -e 's:d:*24h:g' -e 's:h:*60m:g' -e 's:m:*60s:g' -e 's:s::g')"
            ;;
    esac
    seconds="$(printf '%s\n' "$seconds" | bc 2>/dev/null || echo)"

    if [ -z "$seconds" ]; then
        echo "$0: syntax error: $offset" >&2
        return 1
    fi

    check_revs "$@" || return 1

    local revspec="$(printf '%s*\n' "$*" | sed -e 's: \{1,\}:*|:g')"

    # SUSv4 only requires signed long precision in shell's arithmetic
    # expansion, hence we use bc(1) to avoid the year 2038 problem.
    git filter-branch --force --env-filter '
        case "$GIT_COMMIT" in
            '"$revspec"')
                set -- $GIT_AUTHOR_DATE
                time="$1"; tz="$2"
                newtime="$(echo "$time + ('"$seconds"')" | bc)"
                GIT_AUTHOR_DATE="$newtime $tz"
                GIT_COMMITTER_DATE="$newtime $tz"
                ;;
         esac'
}

check_revs () {
    local rev ret=

    for rev; do
        if ! git --no-pager show "$rev" >/dev/null 2>&1; then
            echo "$0: nonexistent or ambiguous object name: $rev" >&2
            ret=1
            continue
        fi
    done

    return $ret
}

git_shift "$@"
